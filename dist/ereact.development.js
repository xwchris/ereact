(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["EReact"] = factory();
	else
		root["EReact"] = factory();
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/static";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./dist/ereact.development.js":
/*!************************************!*\
  !*** ./dist/ereact.development.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj){if(typeof Symbol===\"function\"&&typeof Symbol.iterator===\"symbol\"){_typeof=function _typeof(obj){return typeof obj;};}else{_typeof=function _typeof(obj){return obj&&typeof Symbol===\"function\"&&obj.constructor===Symbol&&obj!==Symbol.prototype?\"symbol\":typeof obj;};}return _typeof(obj);}(function webpackUniversalModuleDefinition(root,factory){if(( false?undefined:_typeof(exports))==='object'&&( false?undefined:_typeof(module))==='object')module.exports=factory();else if(true)!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else {}})(window,function(){return(/******/function(modules){// webpackBootstrap\n/******/ // The module cache\n/******/var installedModules={};/******/ /******/ // The require function\n/******/function __webpack_require__(moduleId){/******/ /******/ // Check if module is in cache\n/******/if(installedModules[moduleId]){/******/return installedModules[moduleId].exports;/******/}/******/ // Create a new module (and put it into the cache)\n/******/var module=installedModules[moduleId]={/******/i:moduleId,/******/l:false,/******/exports:{}/******/};/******/ /******/ // Execute the module function\n/******/modules[moduleId].call(module.exports,module,module.exports,__webpack_require__);/******/ /******/ // Flag the module as loaded\n/******/module.l=true;/******/ /******/ // Return the exports of the module\n/******/return module.exports;/******/}/******/ /******/ /******/ // expose the modules object (__webpack_modules__)\n/******/__webpack_require__.m=modules;/******/ /******/ // expose the module cache\n/******/__webpack_require__.c=installedModules;/******/ /******/ // define getter function for harmony exports\n/******/__webpack_require__.d=function(exports,name,getter){/******/if(!__webpack_require__.o(exports,name)){/******/Object.defineProperty(exports,name,{enumerable:true,get:getter});/******/}/******/};/******/ /******/ // define __esModule on exports\n/******/__webpack_require__.r=function(exports){/******/if(typeof Symbol!=='undefined'&&Symbol.toStringTag){/******/Object.defineProperty(exports,Symbol.toStringTag,{value:'Module'});/******/}/******/Object.defineProperty(exports,'__esModule',{value:true});/******/};/******/ /******/ // create a fake namespace object\n/******/ // mode & 1: value is a module id, require it\n/******/ // mode & 2: merge all properties of value into the ns\n/******/ // mode & 4: return value when already ns object\n/******/ // mode & 8|1: behave like require\n/******/__webpack_require__.t=function(value,mode){/******/if(mode&1)value=__webpack_require__(value);/******/if(mode&8)return value;/******/if(mode&4&&_typeof(value)==='object'&&value&&value.__esModule)return value;/******/var ns=Object.create(null);/******/__webpack_require__.r(ns);/******/Object.defineProperty(ns,'default',{enumerable:true,value:value});/******/if(mode&2&&typeof value!='string')for(var key in value){__webpack_require__.d(ns,key,function(key){return value[key];}.bind(null,key));}/******/return ns;/******/};/******/ /******/ // getDefaultExport function for compatibility with non-harmony modules\n/******/__webpack_require__.n=function(module){/******/var getter=module&&module.__esModule?/******/function getDefault(){return module['default'];}:/******/function getModuleExports(){return module;};/******/__webpack_require__.d(getter,'a',getter);/******/return getter;/******/};/******/ /******/ // Object.prototype.hasOwnProperty.call\n/******/__webpack_require__.o=function(object,property){return Object.prototype.hasOwnProperty.call(object,property);};/******/ /******/ // __webpack_public_path__\n/******/__webpack_require__.p=\"/static\";/******/ /******/ /******/ // Load entry module and return exports\n/******/return __webpack_require__(__webpack_require__.s=\"./index.js\");/******/}(/************************************************************************/ /******/{/***/\"./dist/ereact.development.js\":/*!************************************!*\\\n  !*** ./dist/ereact.development.js ***!\n  \\************************************/ /*! no static exports found */ /***/function distEreactDevelopmentJs(module,exports,__webpack_require__){eval(\"/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { if (typeof Symbol === \\\"function\\\" && typeof Symbol.iterator === \\\"symbol\\\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \\\"function\\\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \\\"symbol\\\" : typeof obj; }; } return _typeof(obj); }\\n\\n(function webpackUniversalModuleDefinition(root, factory) {\\n  if (( false ? undefined : _typeof(exports)) === 'object' && ( false ? undefined : _typeof(module)) === 'object') module.exports = factory();else if (true) !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\\n\\t\\t\\t\\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\\n\\t\\t\\t\\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\\n\\t\\t\\t\\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else {}\\n})(window, function () {\\n  return (\\n    /******/\\n    function (modules) {\\n      // webpackBootstrap\\n\\n      /******/\\n      // The module cache\\n\\n      /******/\\n      var installedModules = {};\\n      /******/\\n\\n      /******/\\n      // The require function\\n\\n      /******/\\n\\n      function __webpack_require__(moduleId) {\\n        /******/\\n\\n        /******/\\n        // Check if module is in cache\\n\\n        /******/\\n        if (installedModules[moduleId]) {\\n          /******/\\n          return installedModules[moduleId].exports;\\n          /******/\\n        }\\n        /******/\\n        // Create a new module (and put it into the cache)\\n\\n        /******/\\n\\n\\n        var module = installedModules[moduleId] = {\\n          /******/\\n          i: moduleId,\\n\\n          /******/\\n          l: false,\\n\\n          /******/\\n          exports: {}\\n          /******/\\n\\n        };\\n        /******/\\n\\n        /******/\\n        // Execute the module function\\n\\n        /******/\\n\\n        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\\n        /******/\\n\\n        /******/\\n        // Flag the module as loaded\\n\\n        /******/\\n\\n        module.l = true;\\n        /******/\\n\\n        /******/\\n        // Return the exports of the module\\n\\n        /******/\\n\\n        return module.exports;\\n        /******/\\n      }\\n      /******/\\n\\n      /******/\\n\\n      /******/\\n      // expose the modules object (__webpack_modules__)\\n\\n      /******/\\n\\n\\n      __webpack_require__.m = modules;\\n      /******/\\n\\n      /******/\\n      // expose the module cache\\n\\n      /******/\\n\\n      __webpack_require__.c = installedModules;\\n      /******/\\n\\n      /******/\\n      // define getter function for harmony exports\\n\\n      /******/\\n\\n      __webpack_require__.d = function (exports, name, getter) {\\n        /******/\\n        if (!__webpack_require__.o(exports, name)) {\\n          /******/\\n          Object.defineProperty(exports, name, {\\n            enumerable: true,\\n            get: getter\\n          });\\n          /******/\\n        }\\n        /******/\\n\\n      };\\n      /******/\\n\\n      /******/\\n      // define __esModule on exports\\n\\n      /******/\\n\\n\\n      __webpack_require__.r = function (exports) {\\n        /******/\\n        if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {\\n          /******/\\n          Object.defineProperty(exports, Symbol.toStringTag, {\\n            value: 'Module'\\n          });\\n          /******/\\n        }\\n        /******/\\n\\n\\n        Object.defineProperty(exports, '__esModule', {\\n          value: true\\n        });\\n        /******/\\n      };\\n      /******/\\n\\n      /******/\\n      // create a fake namespace object\\n\\n      /******/\\n      // mode & 1: value is a module id, require it\\n\\n      /******/\\n      // mode & 2: merge all properties of value into the ns\\n\\n      /******/\\n      // mode & 4: return value when already ns object\\n\\n      /******/\\n      // mode & 8|1: behave like require\\n\\n      /******/\\n\\n\\n      __webpack_require__.t = function (value, mode) {\\n        /******/\\n        if (mode & 1) value = __webpack_require__(value);\\n        /******/\\n\\n        if (mode & 8) return value;\\n        /******/\\n\\n        if (mode & 4 && _typeof(value) === 'object' && value && value.__esModule) return value;\\n        /******/\\n\\n        var ns = Object.create(null);\\n        /******/\\n\\n        __webpack_require__.r(ns);\\n        /******/\\n\\n\\n        Object.defineProperty(ns, 'default', {\\n          enumerable: true,\\n          value: value\\n        });\\n        /******/\\n\\n        if (mode & 2 && typeof value != 'string') for (var key in value) {\\n          __webpack_require__.d(ns, key, function (key) {\\n            return value[key];\\n          }.bind(null, key));\\n        }\\n        /******/\\n\\n        return ns;\\n        /******/\\n      };\\n      /******/\\n\\n      /******/\\n      // getDefaultExport function for compatibility with non-harmony modules\\n\\n      /******/\\n\\n\\n      __webpack_require__.n = function (module) {\\n        /******/\\n        var getter = module && module.__esModule ?\\n        /******/\\n        function getDefault() {\\n          return module['default'];\\n        } :\\n        /******/\\n        function getModuleExports() {\\n          return module;\\n        };\\n        /******/\\n\\n        __webpack_require__.d(getter, 'a', getter);\\n        /******/\\n\\n\\n        return getter;\\n        /******/\\n      };\\n      /******/\\n\\n      /******/\\n      // Object.prototype.hasOwnProperty.call\\n\\n      /******/\\n\\n\\n      __webpack_require__.o = function (object, property) {\\n        return Object.prototype.hasOwnProperty.call(object, property);\\n      };\\n      /******/\\n\\n      /******/\\n      // __webpack_public_path__\\n\\n      /******/\\n\\n\\n      __webpack_require__.p = \\\"/static\\\";\\n      /******/\\n\\n      /******/\\n\\n      /******/\\n      // Load entry module and return exports\\n\\n      /******/\\n\\n      return __webpack_require__(__webpack_require__.s = \\\"./index.js\\\");\\n      /******/\\n    }(\\n    /************************************************************************/\\n\\n    /******/\\n    {\\n      /***/\\n      \\\"./dist/ereact.development.js\\\":\\n      /*!************************************!*\\\\\\n        !*** ./dist/ereact.development.js ***!\\n        \\\\************************************/\\n\\n      /*! no static exports found */\\n\\n      /***/\\n      function distEreactDevelopmentJs(module, exports, __webpack_require__) {\\n        eval(\\\"/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { if (typeof Symbol === \\\\\\\"function\\\\\\\" && typeof Symbol.iterator === \\\\\\\"symbol\\\\\\\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \\\\\\\"function\\\\\\\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \\\\\\\"symbol\\\\\\\" : typeof obj; }; } return _typeof(obj); }\\\\n\\\\n(function webpackUniversalModuleDefinition(root, factory) {\\\\n  if (( false ? undefined : _typeof(exports)) === 'object' && ( false ? undefined : _typeof(module)) === 'object') module.exports = factory();else if (true) !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\\\\n\\\\t\\\\t\\\\t\\\\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\\\\n\\\\t\\\\t\\\\t\\\\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\\\\n\\\\t\\\\t\\\\t\\\\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else {}\\\\n})(window, function () {\\\\n  return (\\\\n    /******/\\\\n    function (modules) {\\\\n      // webpackBootstrap\\\\n\\\\n      /******/\\\\n      // The module cache\\\\n\\\\n      /******/\\\\n      var installedModules = {};\\\\n      /******/\\\\n\\\\n      /******/\\\\n      // The require function\\\\n\\\\n      /******/\\\\n\\\\n      function __webpack_require__(moduleId) {\\\\n        /******/\\\\n\\\\n        /******/\\\\n        // Check if module is in cache\\\\n\\\\n        /******/\\\\n        if (installedModules[moduleId]) {\\\\n          /******/\\\\n          return installedModules[moduleId].exports;\\\\n          /******/\\\\n        }\\\\n        /******/\\\\n        // Create a new module (and put it into the cache)\\\\n\\\\n        /******/\\\\n\\\\n\\\\n        var module = installedModules[moduleId] = {\\\\n          /******/\\\\n          i: moduleId,\\\\n\\\\n          /******/\\\\n          l: false,\\\\n\\\\n          /******/\\\\n          exports: {}\\\\n          /******/\\\\n\\\\n        };\\\\n        /******/\\\\n\\\\n        /******/\\\\n        // Execute the module function\\\\n\\\\n        /******/\\\\n\\\\n        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\\\\n        /******/\\\\n\\\\n        /******/\\\\n        // Flag the module as loaded\\\\n\\\\n        /******/\\\\n\\\\n        module.l = true;\\\\n        /******/\\\\n\\\\n        /******/\\\\n        // Return the exports of the module\\\\n\\\\n        /******/\\\\n\\\\n        return module.exports;\\\\n        /******/\\\\n      }\\\\n      /******/\\\\n\\\\n      /******/\\\\n\\\\n      /******/\\\\n      // expose the modules object (__webpack_modules__)\\\\n\\\\n      /******/\\\\n\\\\n\\\\n      __webpack_require__.m = modules;\\\\n      /******/\\\\n\\\\n      /******/\\\\n      // expose the module cache\\\\n\\\\n      /******/\\\\n\\\\n      __webpack_require__.c = installedModules;\\\\n      /******/\\\\n\\\\n      /******/\\\\n      // define getter function for harmony exports\\\\n\\\\n      /******/\\\\n\\\\n      __webpack_require__.d = function (exports, name, getter) {\\\\n        /******/\\\\n        if (!__webpack_require__.o(exports, name)) {\\\\n          /******/\\\\n          Object.defineProperty(exports, name, {\\\\n            enumerable: true,\\\\n            get: getter\\\\n          });\\\\n          /******/\\\\n        }\\\\n        /******/\\\\n\\\\n      };\\\\n      /******/\\\\n\\\\n      /******/\\\\n      // define __esModule on exports\\\\n\\\\n      /******/\\\\n\\\\n\\\\n      __webpack_require__.r = function (exports) {\\\\n        /******/\\\\n        if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {\\\\n          /******/\\\\n          Object.defineProperty(exports, Symbol.toStringTag, {\\\\n            value: 'Module'\\\\n          });\\\\n          /******/\\\\n        }\\\\n        /******/\\\\n\\\\n\\\\n        Object.defineProperty(exports, '__esModule', {\\\\n          value: true\\\\n        });\\\\n        /******/\\\\n      };\\\\n      /******/\\\\n\\\\n      /******/\\\\n      // create a fake namespace object\\\\n\\\\n      /******/\\\\n      // mode & 1: value is a module id, require it\\\\n\\\\n      /******/\\\\n      // mode & 2: merge all properties of value into the ns\\\\n\\\\n      /******/\\\\n      // mode & 4: return value when already ns object\\\\n\\\\n      /******/\\\\n      // mode & 8|1: behave like require\\\\n\\\\n      /******/\\\\n\\\\n\\\\n      __webpack_require__.t = function (value, mode) {\\\\n        /******/\\\\n        if (mode & 1) value = __webpack_require__(value);\\\\n        /******/\\\\n\\\\n        if (mode & 8) return value;\\\\n        /******/\\\\n\\\\n        if (mode & 4 && _typeof(value) === 'object' && value && value.__esModule) return value;\\\\n        /******/\\\\n\\\\n        var ns = Object.create(null);\\\\n        /******/\\\\n\\\\n        __webpack_require__.r(ns);\\\\n        /******/\\\\n\\\\n\\\\n        Object.defineProperty(ns, 'default', {\\\\n          enumerable: true,\\\\n          value: value\\\\n        });\\\\n        /******/\\\\n\\\\n        if (mode & 2 && typeof value != 'string') for (var key in value) {\\\\n          __webpack_require__.d(ns, key, function (key) {\\\\n            return value[key];\\\\n          }.bind(null, key));\\\\n        }\\\\n        /******/\\\\n\\\\n        return ns;\\\\n        /******/\\\\n      };\\\\n      /******/\\\\n\\\\n      /******/\\\\n      // getDefaultExport function for compatibility with non-harmony modules\\\\n\\\\n      /******/\\\\n\\\\n\\\\n      __webpack_require__.n = function (module) {\\\\n        /******/\\\\n        var getter = module && module.__esModule ?\\\\n        /******/\\\\n        function getDefault() {\\\\n          return module['default'];\\\\n        } :\\\\n        /******/\\\\n        function getModuleExports() {\\\\n          return module;\\\\n        };\\\\n        /******/\\\\n\\\\n        __webpack_require__.d(getter, 'a', getter);\\\\n        /******/\\\\n\\\\n\\\\n        return getter;\\\\n        /******/\\\\n      };\\\\n      /******/\\\\n\\\\n      /******/\\\\n      // Object.prototype.hasOwnProperty.call\\\\n\\\\n      /******/\\\\n\\\\n\\\\n      __webpack_require__.o = function (object, property) {\\\\n        return Object.prototype.hasOwnProperty.call(object, property);\\\\n      };\\\\n      /******/\\\\n\\\\n      /******/\\\\n      // __webpack_public_path__\\\\n\\\\n      /******/\\\\n\\\\n\\\\n      __webpack_require__.p = \\\\\\\"/static\\\\\\\";\\\\n      /******/\\\\n\\\\n      /******/\\\\n\\\\n      /******/\\\\n      // Load entry module and return exports\\\\n\\\\n      /******/\\\\n\\\\n      return __webpack_require__(__webpack_require__.s = \\\\\\\"./index.js\\\\\\\");\\\\n      /******/\\\\n    }(\\\\n    /************************************************************************/\\\\n\\\\n    /******/\\\\n    {\\\\n      /***/\\\\n      \\\\\\\"./dist/ereact.development.js\\\\\\\":\\\\n      /*!************************************!*\\\\\\\\\\\\n        !*** ./dist/ereact.development.js ***!\\\\n        \\\\\\\\************************************/\\\\n\\\\n      /*! no static exports found */\\\\n\\\\n      /***/\\\\n      function distEreactDevelopmentJs(module, exports, __webpack_require__) {\\\\n        eval(\\\\\\\"/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { if (typeof Symbol === \\\\\\\\\\\\\\\"function\\\\\\\\\\\\\\\" && typeof Symbol.iterator === \\\\\\\\\\\\\\\"symbol\\\\\\\\\\\\\\\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \\\\\\\\\\\\\\\"function\\\\\\\\\\\\\\\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \\\\\\\\\\\\\\\"symbol\\\\\\\\\\\\\\\" : typeof obj; }; } return _typeof(obj); }\\\\\\\\n\\\\\\\\n(function webpackUniversalModuleDefinition(root, factory) {\\\\\\\\n  if (( false ? undefined : _typeof(exports)) === 'object' && ( false ? undefined : _typeof(module)) === 'object') module.exports = factory();else if (true) !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\\\\\\\\n\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else {}\\\\\\\\n})(window, function () {\\\\\\\\n  return (\\\\\\\\n    /******/\\\\\\\\n    function (modules) {\\\\\\\\n      // webpackBootstrap\\\\\\\\n\\\\\\\\n      /******/\\\\\\\\n      // The module cache\\\\\\\\n\\\\\\\\n      /******/\\\\\\\\n      var installedModules = {};\\\\\\\\n      /******/\\\\\\\\n\\\\\\\\n      /******/\\\\\\\\n      // The require function\\\\\\\\n\\\\\\\\n      /******/\\\\\\\\n\\\\\\\\n      function __webpack_require__(moduleId) {\\\\\\\\n        /******/\\\\\\\\n\\\\\\\\n        /******/\\\\\\\\n        // Check if module is in cache\\\\\\\\n\\\\\\\\n        /******/\\\\\\\\n        if (installedModules[moduleId]) {\\\\\\\\n          /******/\\\\\\\\n          return installedModules[moduleId].exports;\\\\\\\\n          /******/\\\\\\\\n        }\\\\\\\\n        /******/\\\\\\\\n        // Create a new module (and put it into the cache)\\\\\\\\n\\\\\\\\n        /******/\\\\\\\\n\\\\\\\\n\\\\\\\\n        var module = installedModules[moduleId] = {\\\\\\\\n          /******/\\\\\\\\n          i: moduleId,\\\\\\\\n\\\\\\\\n          /******/\\\\\\\\n          l: false,\\\\\\\\n\\\\\\\\n          /******/\\\\\\\\n          exports: {}\\\\\\\\n          /******/\\\\\\\\n\\\\\\\\n        };\\\\\\\\n        /******/\\\\\\\\n\\\\\\\\n        /******/\\\\\\\\n        // Execute the module function\\\\\\\\n\\\\\\\\n        /******/\\\\\\\\n\\\\\\\\n        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\\\\\\\\n        /******/\\\\\\\\n\\\\\\\\n        /******/\\\\\\\\n        // Flag the module as loaded\\\\\\\\n\\\\\\\\n        /******/\\\\\\\\n\\\\\\\\n        module.l = true;\\\\\\\\n        /******/\\\\\\\\n\\\\\\\\n        /******/\\\\\\\\n        // Return the exports of the module\\\\\\\\n\\\\\\\\n        /******/\\\\\\\\n\\\\\\\\n        return module.exports;\\\\\\\\n        /******/\\\\\\\\n      }\\\\\\\\n      /******/\\\\\\\\n\\\\\\\\n      /******/\\\\\\\\n\\\\\\\\n      /******/\\\\\\\\n      // expose the modules object (__webpack_modules__)\\\\\\\\n\\\\\\\\n      /******/\\\\\\\\n\\\\\\\\n\\\\\\\\n      __webpack_require__.m = modules;\\\\\\\\n      /******/\\\\\\\\n\\\\\\\\n      /******/\\\\\\\\n      // expose the module cache\\\\\\\\n\\\\\\\\n      /******/\\\\\\\\n\\\\\\\\n      __webpack_require__.c = installedModules;\\\\\\\\n      /******/\\\\\\\\n\\\\\\\\n      /******/\\\\\\\\n      // define getter function for harmony exports\\\\\\\\n\\\\\\\\n      /******/\\\\\\\\n\\\\\\\\n      __webpack_require__.d = function (exports, name, getter) {\\\\\\\\n        /******/\\\\\\\\n        if (!__webpack_require__.o(exports, name)) {\\\\\\\\n          /******/\\\\\\\\n          Object.defineProperty(exports, name, {\\\\\\\\n            enumerable: true,\\\\\\\\n            get: getter\\\\\\\\n          });\\\\\\\\n          /******/\\\\\\\\n        }\\\\\\\\n        /******/\\\\\\\\n\\\\\\\\n      };\\\\\\\\n      /******/\\\\\\\\n\\\\\\\\n      /******/\\\\\\\\n      // define __esModule on exports\\\\\\\\n\\\\\\\\n      /******/\\\\\\\\n\\\\\\\\n\\\\\\\\n      __webpack_require__.r = function (exports) {\\\\\\\\n        /******/\\\\\\\\n        if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {\\\\\\\\n          /******/\\\\\\\\n          Object.defineProperty(exports, Symbol.toStringTag, {\\\\\\\\n            value: 'Module'\\\\\\\\n          });\\\\\\\\n          /******/\\\\\\\\n        }\\\\\\\\n        /******/\\\\\\\\n\\\\\\\\n\\\\\\\\n        Object.defineProperty(exports, '__esModule', {\\\\\\\\n          value: true\\\\\\\\n        });\\\\\\\\n        /******/\\\\\\\\n      };\\\\\\\\n      /******/\\\\\\\\n\\\\\\\\n      /******/\\\\\\\\n      // create a fake namespace object\\\\\\\\n\\\\\\\\n      /******/\\\\\\\\n      // mode & 1: value is a module id, require it\\\\\\\\n\\\\\\\\n      /******/\\\\\\\\n      // mode & 2: merge all properties of value into the ns\\\\\\\\n\\\\\\\\n      /******/\\\\\\\\n      // mode & 4: return value when already ns object\\\\\\\\n\\\\\\\\n      /******/\\\\\\\\n      // mode & 8|1: behave like require\\\\\\\\n\\\\\\\\n      /******/\\\\\\\\n\\\\\\\\n\\\\\\\\n      __webpack_require__.t = function (value, mode) {\\\\\\\\n        /******/\\\\\\\\n        if (mode & 1) value = __webpack_require__(value);\\\\\\\\n        /******/\\\\\\\\n\\\\\\\\n        if (mode & 8) return value;\\\\\\\\n        /******/\\\\\\\\n\\\\\\\\n        if (mode & 4 && _typeof(value) === 'object' && value && value.__esModule) return value;\\\\\\\\n        /******/\\\\\\\\n\\\\\\\\n        var ns = Object.create(null);\\\\\\\\n        /******/\\\\\\\\n\\\\\\\\n        __webpack_require__.r(ns);\\\\\\\\n        /******/\\\\\\\\n\\\\\\\\n\\\\\\\\n        Object.defineProperty(ns, 'default', {\\\\\\\\n          enumerable: true,\\\\\\\\n          value: value\\\\\\\\n        });\\\\\\\\n        /******/\\\\\\\\n\\\\\\\\n        if (mode & 2 && typeof value != 'string') for (var key in value) {\\\\\\\\n          __webpack_require__.d(ns, key, function (key) {\\\\\\\\n            return value[key];\\\\\\\\n          }.bind(null, key));\\\\\\\\n        }\\\\\\\\n        /******/\\\\\\\\n\\\\\\\\n        return ns;\\\\\\\\n        /******/\\\\\\\\n      };\\\\\\\\n      /******/\\\\\\\\n\\\\\\\\n      /******/\\\\\\\\n      // getDefaultExport function for compatibility with non-harmony modules\\\\\\\\n\\\\\\\\n      /******/\\\\\\\\n\\\\\\\\n\\\\\\\\n      __webpack_require__.n = function (module) {\\\\\\\\n        /******/\\\\\\\\n        var getter = module && module.__esModule ?\\\\\\\\n        /******/\\\\\\\\n        function getDefault() {\\\\\\\\n          return module['default'];\\\\\\\\n        } :\\\\\\\\n        /******/\\\\\\\\n        function getModuleExports() {\\\\\\\\n          return module;\\\\\\\\n        };\\\\\\\\n        /******/\\\\\\\\n\\\\\\\\n        __webpack_require__.d(getter, 'a', getter);\\\\\\\\n        /******/\\\\\\\\n\\\\\\\\n\\\\\\\\n        return getter;\\\\\\\\n        /******/\\\\\\\\n      };\\\\\\\\n      /******/\\\\\\\\n\\\\\\\\n      /******/\\\\\\\\n      // Object.prototype.hasOwnProperty.call\\\\\\\\n\\\\\\\\n      /******/\\\\\\\\n\\\\\\\\n\\\\\\\\n      __webpack_require__.o = function (object, property) {\\\\\\\\n        return Object.prototype.hasOwnProperty.call(object, property);\\\\\\\\n      };\\\\\\\\n      /******/\\\\\\\\n\\\\\\\\n      /******/\\\\\\\\n      // __webpack_public_path__\\\\\\\\n\\\\\\\\n      /******/\\\\\\\\n\\\\\\\\n\\\\\\\\n      __webpack_require__.p = \\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\";\\\\\\\\n      /******/\\\\\\\\n\\\\\\\\n      /******/\\\\\\\\n\\\\\\\\n      /******/\\\\\\\\n      // Load entry module and return exports\\\\\\\\n\\\\\\\\n      /******/\\\\\\\\n\\\\\\\\n      return __webpack_require__(__webpack_require__.s = \\\\\\\\\\\\\\\"./src/index.js\\\\\\\\\\\\\\\");\\\\\\\\n      /******/\\\\\\\\n    }(\\\\\\\\n    /************************************************************************/\\\\\\\\n\\\\\\\\n    /******/\\\\\\\\n    {\\\\\\\\n      /***/\\\\\\\\n      \\\\\\\\\\\\\\\"./src/component.js\\\\\\\\\\\\\\\":\\\\\\\\n      /*!**************************!*\\\\\\\\\\\\\\\\\\\\\\\\n        !*** ./src/component.js ***!\\\\\\\\n        \\\\\\\\\\\\\\\\**************************/\\\\\\\\n\\\\\\\\n      /*! exports provided: buildComponentFromVNode, Component */\\\\\\\\n\\\\\\\\n      /***/\\\\\\\\n      function srcComponentJs(module, __webpack_exports__, __webpack_require__) {\\\\\\\\n        \\\\\\\\\\\\\\\"use strict\\\\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\n        eval(\\\\\\\\\\\\\\\"__webpack_require__.r(__webpack_exports__);\\\\\\\\\\\\\\\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"buildComponentFromVNode\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\", function() { return buildComponentFromVNode; });\\\\\\\\\\\\\\\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Component\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\", function() { return Component; });\\\\\\\\\\\\\\\\n/* harmony import */ var _diff__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./diff */ \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"./src/diff.js\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\");\\\\\\\\\\\\\\\\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants */ \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"./src/constants.js\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\");\\\\\\\\\\\\\\\\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils */ \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"./src/utils.js\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\");\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nvar willRenderQueue = [];\\\\\\\\\\\\\\\\n/**\\\\\\\\\\\\\\\\n * Component Class which need to be inherited by component\\\\\\\\\\\\\\\\n *\\\\\\\\\\\\\\\\n * @param {Object} props the props to be initialized\\\\\\\\\\\\\\\\n * @param {Object} context the context to be initialized\\\\\\\\\\\\\\\\n *\\\\\\\\\\\\\\\\n */\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nfunction Component(props, context) {\\\\\\\\\\\\\\\\n  // preact is true, here not understand\\\\\\\\\\\\\\\\n  this._dirty = false;\\\\\\\\\\\\\\\\n  this.props = props;\\\\\\\\\\\\\\\\n  this.state = this.state || {};\\\\\\\\\\\\\\\\n  this.context = context || {};\\\\\\\\\\\\\\\\n  this._renderCallbacks = [];\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nObject.assign(Component.prototype, {\\\\\\\\\\\\\\\\n  /**\\\\\\\\\\\\\\\\n   * Change component state\\\\\\\\\\\\\\\\n   *\\\\\\\\\\\\\\\\n   * @param {Object} state the state will be set\\\\\\\\\\\\\\\\n   * @param {Function} callback callback after the component rendered\\\\\\\\\\\\\\\\n   *\\\\\\\\\\\\\\\\n   */\\\\\\\\\\\\\\\\n  setState: function setState(state, callback) {\\\\\\\\\\\\\\\\n    if (!this.prevState) this.prevState = this.state;\\\\\\\\\\\\\\\\n    this.state = Object.assign({}, this.state, state);\\\\\\\\\\\\\\\\n    if (callback) this._renderCallbacks.push(callback);\\\\\\\\\\\\\\\\n    renderComponent(this, _constants__WEBPACK_IMPORTED_MODULE_1__[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"ASYNC_RENDER\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"]);\\\\\\\\\\\\\\\\n  },\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n  /**\\\\\\\\\\\\\\\\n   * Update component force which means ignore shouldComponentUpdate hook value\\\\\\\\\\\\\\\\n   *\\\\\\\\\\\\\\\\n   * @param {Function} callback callback after the component rendered\\\\\\\\\\\\\\\\n   */\\\\\\\\\\\\\\\\n  forceUpdate: function forceUpdate(callback) {\\\\\\\\\\\\\\\\n    if (callback) this._renderCallbacks.push(callback);\\\\\\\\\\\\\\\\n    renderComponent(this, _constants__WEBPACK_IMPORTED_MODULE_1__[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"FORCE_RENDER\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"]);\\\\\\\\\\\\\\\\n  },\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n  /**\\\\\\\\\\\\\\\\n   * Default render function\\\\\\\\\\\\\\\\n   */\\\\\\\\\\\\\\\\n  render: function render() {}\\\\\\\\\\\\\\\\n});\\\\\\\\\\\\\\\\n/**\\\\\\\\\\\\\\\\n * build component from VNode\\\\\\\\\\\\\\\\n *\\\\\\\\\\\\\\\\n * @param {Element} dom the dom to be contrasted\\\\\\\\\\\\\\\\n * @param {VNode} vnode virtual node which will be used to create component\\\\\\\\\\\\\\\\n * @param {Object} context component context\\\\\\\\\\\\\\\\n *\\\\\\\\\\\\\\\\n * @return component's root dom\\\\\\\\\\\\\\\\n */\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nvar buildComponentFromVNode = function buildComponentFromVNode(dom, vnode, context) {\\\\\\\\\\\\\\\\n  var props = vnode.attributes;\\\\\\\\\\\\\\\\n  var inst;\\\\\\\\\\\\\\\\n  var isMatched = dom == null || dom._component == null || dom._component.constructor !== vode.type;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n  if (isMatched) {\\\\\\\\\\\\\\\\n    inst = createComponent(vnode.type, props, context);\\\\\\\\\\\\\\\\n    var needUnmount = !!(dom && dom._component);\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n    if (needUnmount && dom._component.componentWillUnmount) {\\\\\\\\\\\\\\\\n      dom._component.componentWillUnmount();\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\n  } else {\\\\\\\\\\\\\\\\n    inst = dom._component;\\\\\\\\\\\\\\\\n  }\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n  setComponentProps(inst, props, context);\\\\\\\\\\\\\\\\n  return inst.base;\\\\\\\\\\\\\\\\n};\\\\\\\\\\\\\\\\n/**\\\\\\\\\\\\\\\\n * create component instance\\\\\\\\\\\\\\\\n *\\\\\\\\\\\\\\\\n * @param {Function} Constructor component constructor which is class or function\\\\\\\\\\\\\\\\n * @param {Object} props the props to be initialized\\\\\\\\\\\\\\\\n * @param {Object} context the context to be initialized\\\\\\\\\\\\\\\\n *\\\\\\\\\\\\\\\\n * @return component instance\\\\\\\\\\\\\\\\n */\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nvar createComponent = function createComponent(Constructor, props, context) {\\\\\\\\\\\\\\\\n  var inst;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n  if (Constructor.prototype && Constructor.prototype.render) {\\\\\\\\\\\\\\\\n    inst = new Constructor(props, context);\\\\\\\\\\\\\\\\n    Component.call(inst, props, context);\\\\\\\\\\\\\\\\n  } else {\\\\\\\\\\\\\\\\n    inst = new Component(props, context);\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n    inst.render = function () {\\\\\\\\\\\\\\\\n      return Constructor(props, context);\\\\\\\\\\\\\\\\n    };\\\\\\\\\\\\\\\\n  }\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n  inst.constructor = Constructor;\\\\\\\\\\\\\\\\n  return inst;\\\\\\\\\\\\\\\\n};\\\\\\\\\\\\\\\\n/**\\\\\\\\\\\\\\\\n * Set component props\\\\\\\\\\\\\\\\n *\\\\\\\\\\\\\\\\n * @param {Component} component component which will attach props\\\\\\\\\\\\\\\\n * @param {Object} props the props to be attached\\\\\\\\\\\\\\\\n * @param {Object} context via context\\\\\\\\\\\\\\\\n *\\\\\\\\\\\\\\\\n */\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nvar setComponentProps = function setComponentProps(component, props, context) {\\\\\\\\\\\\\\\\n  if (!component.base) {\\\\\\\\\\\\\\\\n    if (component.componentWillMount) component.componentWillMount();\\\\\\\\\\\\\\\\n  } else if (component.componentWillReceiveProps) {\\\\\\\\\\\\\\\\n    component.componentWillReceiveProps(props);\\\\\\\\\\\\\\\\n  }\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n  if (!component.prevProps) component.prevProps = component.props;\\\\\\\\\\\\\\\\n  if (!component.prevContext) component.prevContext = component.context;\\\\\\\\\\\\\\\\n  component.props = props;\\\\\\\\\\\\\\\\n  renderComponent(component, _constants__WEBPACK_IMPORTED_MODULE_1__[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"SYNC_RENDER\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"], context);\\\\\\\\\\\\\\\\n};\\\\\\\\\\\\\\\\n/**\\\\\\\\\\\\\\\\n * Render component to dom element\\\\\\\\\\\\\\\\n *\\\\\\\\\\\\\\\\n * @param {Component} component component instance to render\\\\\\\\\\\\\\\\n * @param {string} renderMode render mode\\\\\\\\\\\\\\\\n * @param {Object} context context to be transported to children\\\\\\\\\\\\\\\\n *\\\\\\\\\\\\\\\\n */\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nvar renderComponent = function renderComponent(component, renderMode, context) {\\\\\\\\\\\\\\\\n  var props = component.props;\\\\\\\\\\\\\\\\n  var state = component.state;\\\\\\\\\\\\\\\\n  var prevProps = component.prevProps || props;\\\\\\\\\\\\\\\\n  var prevState = component.prevState || state;\\\\\\\\\\\\\\\\n  var prevContext = component.prevContext || context;\\\\\\\\\\\\\\\\n  var isUpdate = !!component.base;\\\\\\\\\\\\\\\\n  var isForceRender = renderMode === _constants__WEBPACK_IMPORTED_MODULE_1__[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"FORCE_RENDER\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"];\\\\\\\\\\\\\\\\n  var skipRender = false; // async render\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n  if (renderMode === _constants__WEBPACK_IMPORTED_MODULE_1__[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"ASYNC_RENDER\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"]) {\\\\\\\\\\\\\\\\n    if (!component._dirty && willRenderQueue.push(component) === 1) {\\\\\\\\\\\\\\\\n      component._dirty = true;\\\\\\\\\\\\\\\\n      Object(_utils__WEBPACK_IMPORTED_MODULE_2__[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"defer\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"])(function () {\\\\\\\\\\\\\\\\n        var willRenderedComponent = willRenderQueue.pop();\\\\\\\\\\\\\\\\n        if (willRenderedComponent._dirty) renderComponent(willRenderedComponent, _constants__WEBPACK_IMPORTED_MODULE_1__[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"SYNC_RENDER\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"], context);\\\\\\\\\\\\\\\\n      });\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n    return;\\\\\\\\\\\\\\\\n  }\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n  component._dirty = false;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n  if (isUpdate) {\\\\\\\\\\\\\\\\n    component.props = prevProps;\\\\\\\\\\\\\\\\n    component.state = prevState;\\\\\\\\\\\\\\\\n    component.context = prevContext;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n    if (!isForceRender && component.shouldComponentUpdate && component.shouldComponentUpdate(props, state) === false) {\\\\\\\\\\\\\\\\n      skipRender = true;\\\\\\\\\\\\\\\\n    } else if (component.componentWillUpdate) {\\\\\\\\\\\\\\\\n      component.componentWillUpdate(props, state);\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n    component.props = props;\\\\\\\\\\\\\\\\n    component.state = state;\\\\\\\\\\\\\\\\n    component.context = context;\\\\\\\\\\\\\\\\n  }\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n  component.prevProps = component.prevState = component.prevContext = null;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n  if (!skipRender) {\\\\\\\\\\\\\\\\n    if (component.getChildContext) {\\\\\\\\\\\\\\\\n      context = Object.assign({}, context, component.getChildContext());\\\\\\\\\\\\\\\\n    } // rendered maybe an array\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n    var rendered = component.render();\\\\\\\\\\\\\\\\n    var base = null;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n    if (Object(_utils__WEBPACK_IMPORTED_MODULE_2__[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"isArray\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"])(rendered)) {\\\\\\\\\\\\\\\\n      base = document.createDocumentFragment();\\\\\\\\\\\\\\\\n      Object(_diff__WEBPACK_IMPORTED_MODULE_0__[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"diffChildren\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"])(base, rendered, context);\\\\\\\\\\\\\\\\n    } else {\\\\\\\\\\\\\\\\n      base = Object(_diff__WEBPACK_IMPORTED_MODULE_0__[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"diff\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"])(component.base, rendered, null, context);\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n    component.base = base;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n    if (!isUpdate && component.componentDidMount) {\\\\\\\\\\\\\\\\n      component.componentDidMount();\\\\\\\\\\\\\\\\n    } else if (isUpdate && component.componentDidUpdate) {\\\\\\\\\\\\\\\\n      component.componentDidUpdate(prevProps, prevState);\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n    base._component = component;\\\\\\\\\\\\\\\\n  }\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n  while (component._renderCallbacks.length) {\\\\\\\\\\\\\\\\n    component._renderCallbacks.pop().call(component);\\\\\\\\\\\\\\\\n  }\\\\\\\\\\\\\\\\n};\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n//# sourceURL=[module]\\\\\\\\\\\\\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\\\\\\\\\\\\\\\n//# sourceURL=webpack-internal:///./src/component.js\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\");\\\\\\\\n        /***/\\\\\\\\n      },\\\\\\\\n\\\\\\\\n      /***/\\\\\\\\n      \\\\\\\\\\\\\\\"./src/constants.js\\\\\\\\\\\\\\\":\\\\\\\\n      /*!**************************!*\\\\\\\\\\\\\\\\\\\\\\\\n        !*** ./src/constants.js ***!\\\\\\\\n        \\\\\\\\\\\\\\\\**************************/\\\\\\\\n\\\\\\\\n      /*! exports provided: ATTR_KEY, SYNC_RENDER, ASYNC_RENDER, FORCE_RENDER */\\\\\\\\n\\\\\\\\n      /***/\\\\\\\\n      function srcConstantsJs(module, __webpack_exports__, __webpack_require__) {\\\\\\\\n        \\\\\\\\\\\\\\\"use strict\\\\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\n        eval(\\\\\\\\\\\\\\\"__webpack_require__.r(__webpack_exports__);\\\\\\\\\\\\\\\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"ATTR_KEY\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\", function() { return ATTR_KEY; });\\\\\\\\\\\\\\\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"SYNC_RENDER\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\", function() { return SYNC_RENDER; });\\\\\\\\\\\\\\\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"ASYNC_RENDER\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\", function() { return ASYNC_RENDER; });\\\\\\\\\\\\\\\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"FORCE_RENDER\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\", function() { return FORCE_RENDER; });\\\\\\\\\\\\\\\\nvar ATTR_KEY = '@react/__attr_key__'; // Render mode constants\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nvar SYNC_RENDER = '@react/render_sync';\\\\\\\\\\\\\\\\nvar ASYNC_RENDER = '@react/render_async';\\\\\\\\\\\\\\\\nvar FORCE_RENDER = '@react/force_update';\\\\\\\\\\\\\\\\n//# sourceURL=[module]\\\\\\\\\\\\\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29uc3RhbnRzLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vRVJlYWN0Ly4vc3JjL2NvbnN0YW50cy5qcz81ZmIwIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEFUVFJfS0VZID0gJ0ByZWFjdC9fX2F0dHJfa2V5X18nO1xuXG4vLyBSZW5kZXIgbW9kZSBjb25zdGFudHNcbmNvbnN0IFNZTkNfUkVOREVSID0gJ0ByZWFjdC9yZW5kZXJfc3luYyc7XG5jb25zdCBBU1lOQ19SRU5ERVIgPSAnQHJlYWN0L3JlbmRlcl9hc3luYyc7XG5jb25zdCBGT1JDRV9SRU5ERVIgPSAnQHJlYWN0L2ZvcmNlX3VwZGF0ZSc7XG5cbmV4cG9ydCB7IEFUVFJfS0VZLCBTWU5DX1JFTkRFUiwgQVNZTkNfUkVOREVSLCBGT1JDRV9SRU5ERVIgfTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\\\\\\\\\\\\\\\\n//# sourceURL=webpack-internal:///./src/constants.js\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\");\\\\\\\\n        /***/\\\\\\\\n      },\\\\\\\\n\\\\\\\\n      /***/\\\\\\\\n      \\\\\\\\\\\\\\\"./src/createElement.js\\\\\\\\\\\\\\\":\\\\\\\\n      /*!******************************!*\\\\\\\\\\\\\\\\\\\\\\\\n        !*** ./src/createElement.js ***!\\\\\\\\n        \\\\\\\\\\\\\\\\******************************/\\\\\\\\n\\\\\\\\n      /*! exports provided: default */\\\\\\\\n\\\\\\\\n      /***/\\\\\\\\n      function srcCreateElementJs(module, __webpack_exports__, __webpack_require__) {\\\\\\\\n        \\\\\\\\\\\\\\\"use strict\\\\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\n        eval(\\\\\\\\\\\\\\\"__webpack_require__.r(__webpack_exports__);\\\\\\\\\\\\\\\\n/**\\\\\\\\\\\\\\\\n * vnode constructor\\\\\\\\\\\\\\\\n */\\\\\\\\\\\\\\\\nfunction VNode() {}\\\\\\\\\\\\\\\\n/**\\\\\\\\\\\\\\\\n * Create VNode element\\\\\\\\\\\\\\\\n *\\\\\\\\\\\\\\\\n * @param { string | function } type\\\\\\\\\\\\\\\\n * @param { object } attributes\\\\\\\\\\\\\\\\n * @param { Array(VNode) } children\\\\\\\\\\\\\\\\n *\\\\\\\\\\\\\\\\n * @return { VNode } vnode\\\\\\\\\\\\\\\\n */\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nvar createElement = function createElement(type, attributes) {\\\\\\\\\\\\\\\\n  var _ref;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n  // shallow copy attribute\\\\\\\\\\\\\\\\n  var clonedAttributes = Object.assign({}, attributes); // flatten children and filter children\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n  for (var _len = arguments.length, children = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\\\\\\\\\\\\\\\\n    children[_key - 2] = arguments[_key];\\\\\\\\\\\\\\\\n  }\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n  var filteredChildren = (_ref = []).concat.apply(_ref, children); // create and assign vnode\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n  var vnode = new VNode();\\\\\\\\\\\\\\\\n  clonedAttributes.children = filteredChildren;\\\\\\\\\\\\\\\\n  vnode.type = type;\\\\\\\\\\\\\\\\n  vnode.attributes = clonedAttributes;\\\\\\\\\\\\\\\\n  vnode.children = filteredChildren;\\\\\\\\\\\\\\\\n  return vnode;\\\\\\\\\\\\\\\\n};\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n/* harmony default export */ __webpack_exports__[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"] = (createElement);//# sourceURL=[module]\\\\\\\\\\\\\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY3JlYXRlRWxlbWVudC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL0VSZWFjdC8uL3NyYy9jcmVhdGVFbGVtZW50LmpzPzc2ZDQiXSwic291cmNlc0NvbnRlbnQiOlsiXG4vKipcbiAqIHZub2RlIGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIFZOb2RlICgpIHt9XG5cbi8qKlxuICogQ3JlYXRlIFZOb2RlIGVsZW1lbnRcbiAqXG4gKiBAcGFyYW0geyBzdHJpbmcgfCBmdW5jdGlvbiB9IHR5cGVcbiAqIEBwYXJhbSB7IG9iamVjdCB9IGF0dHJpYnV0ZXNcbiAqIEBwYXJhbSB7IEFycmF5KFZOb2RlKSB9IGNoaWxkcmVuXG4gKlxuICogQHJldHVybiB7IFZOb2RlIH0gdm5vZGVcbiAqL1xuXG5jb25zdCBjcmVhdGVFbGVtZW50ID0gKHR5cGUsIGF0dHJpYnV0ZXMsIC4uLmNoaWxkcmVuKSA9PiB7XG5cbiAgLy8gc2hhbGxvdyBjb3B5IGF0dHJpYnV0ZVxuICBjb25zdCBjbG9uZWRBdHRyaWJ1dGVzID0gT2JqZWN0LmFzc2lnbih7fSwgYXR0cmlidXRlcyk7XG5cbiAgLy8gZmxhdHRlbiBjaGlsZHJlbiBhbmQgZmlsdGVyIGNoaWxkcmVuXG4gIGNvbnN0IGZpbHRlcmVkQ2hpbGRyZW4gPSBbXS5jb25jYXQoLi4uY2hpbGRyZW4pO1xuXG4gIC8vIGNyZWF0ZSBhbmQgYXNzaWduIHZub2RlXG4gIGNvbnN0IHZub2RlID0gbmV3IFZOb2RlKCk7XG5cbiAgY2xvbmVkQXR0cmlidXRlcy5jaGlsZHJlbiA9IGZpbHRlcmVkQ2hpbGRyZW47XG5cbiAgdm5vZGUudHlwZSA9IHR5cGU7XG4gIHZub2RlLmF0dHJpYnV0ZXMgPSBjbG9uZWRBdHRyaWJ1dGVzO1xuICB2bm9kZS5jaGlsZHJlbiA9IGZpbHRlcmVkQ2hpbGRyZW47XG5cbiAgcmV0dXJuIHZub2RlO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVFbGVtZW50O1xuIl0sIm1hcHBpbmdzIjoiQUFDQTtBQUFBOzs7QUFHQTtBQUVBOzs7Ozs7Ozs7OztBQVVBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUpBO0FBQUE7QUFBQTtBQUNBO0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\\\\\\\\\\\\\\\\n//# sourceURL=webpack-internal:///./src/createElement.js\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\");\\\\\\\\n        /***/\\\\\\\\n      },\\\\\\\\n\\\\\\\\n      /***/\\\\\\\\n      \\\\\\\\\\\\\\\"./src/diff.js\\\\\\\\\\\\\\\":\\\\\\\\n      /*!*********************!*\\\\\\\\\\\\\\\\\\\\\\\\n        !*** ./src/diff.js ***!\\\\\\\\n        \\\\\\\\\\\\\\\\*********************/\\\\\\\\n\\\\\\\\n      /*! exports provided: diff, idiff, diffChildren */\\\\\\\\n\\\\\\\\n      /***/\\\\\\\\n      function srcDiffJs(module, __webpack_exports__, __webpack_require__) {\\\\\\\\n        \\\\\\\\\\\\\\\"use strict\\\\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\n        eval(\\\\\\\\\\\\\\\"__webpack_require__.r(__webpack_exports__);\\\\\\\\\\\\\\\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"diff\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\", function() { return diff; });\\\\\\\\\\\\\\\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"idiff\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\", function() { return idiff; });\\\\\\\\\\\\\\\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"diffChildren\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\", function() { return diffChildren; });\\\\\\\\\\\\\\\\n/* harmony import */ var _component__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./component */ \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"./src/component.js\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\");\\\\\\\\\\\\\\\\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./constants */ \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"./src/constants.js\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\");\\\\\\\\\\\\\\\\nfunction _typeof(obj) { if (typeof Symbol === \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"function\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" && typeof Symbol.iterator === \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"symbol\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"function\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"symbol\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\" : typeof obj; }; } return _typeof(obj); }\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n/**\\\\\\\\\\\\\\\\n * Reconciliation method\\\\\\\\\\\\\\\\n *\\\\\\\\\\\\\\\\n * @param { dom } dom given dom\\\\\\\\\\\\\\\\n * @param { VNode } vnode vnode to diff\\\\\\\\\\\\\\\\n * @param { dom } parent the dom vnode need to mount\\\\\\\\\\\\\\\\n *\\\\\\\\\\\\\\\\n * @return the result dom\\\\\\\\\\\\\\\\n */\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nvar diff = function diff(dom, vnode, parent, context) {\\\\\\\\\\\\\\\\n  var rdom = idiff(dom, vnode, context);\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n  if (parent && rdom.parentNode !== parent) {\\\\\\\\\\\\\\\\n    parent.appendChild(rdom);\\\\\\\\\\\\\\\\n  }\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n  return rdom;\\\\\\\\\\\\\\\\n};\\\\\\\\\\\\\\\\n/**\\\\\\\\\\\\\\\\n * Internal reconciliation method\\\\\\\\\\\\\\\\n *\\\\\\\\\\\\\\\\n * @param { dom } dom given dom\\\\\\\\\\\\\\\\n * @param { VNode } vnode vnode to diff\\\\\\\\\\\\\\\\n *\\\\\\\\\\\\\\\\n * @return { dom } result dom\\\\\\\\\\\\\\\\n */\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nvar idiff = function idiff(dom, vnode, context) {\\\\\\\\\\\\\\\\n  var out = dom;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n  if (vnode == null || typeof vnode === 'boolean') {\\\\\\\\\\\\\\\\n    vnode = '';\\\\\\\\\\\\\\\\n  } // update or create a node\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n  if (typeof vnode === 'string' || typeof vnode === 'number') {\\\\\\\\\\\\\\\\n    if (dom && dom.parentNode && dom.nodeType === 3) {\\\\\\\\\\\\\\\\n      if (dom.nodeValue !== vnode) {\\\\\\\\\\\\\\\\n        dom.nodeValue = vnode;\\\\\\\\\\\\\\\\n      }\\\\\\\\\\\\\\\\n    } else {\\\\\\\\\\\\\\\\n      out = document.createTextNode(vnode);\\\\\\\\\\\\\\\\n      if (dom && dom.parentNode) dom.parentNode.replaceChild(out, dom);\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n    return out;\\\\\\\\\\\\\\\\n  }\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n  if (typeof vnode.type === 'function') {\\\\\\\\\\\\\\\\n    return Object(_component__WEBPACK_IMPORTED_MODULE_0__[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"buildComponentFromVNode\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"])(dom, vnode, context);\\\\\\\\\\\\\\\\n  }\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n  if (!dom || dom.nodeName.toLowerCase() !== vnode.type) {\\\\\\\\\\\\\\\\n    out = document.createElement(vnode.type);\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n    if (dom) {\\\\\\\\\\\\\\\\n      while (dom.firstChild) {\\\\\\\\\\\\\\\\n        out.appendChild(dom.firstChild);\\\\\\\\\\\\\\\\n      }\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n      if (dom.parentNode) dom.parentNode.replaceChild(out, dom);\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\n  } // these two functions can't swap position\\\\\\\\\\\\\\\\n  // because diffAttributes may set dangerouslySetInnerHTML which can change the structure\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n  diffChildren(out, vnode.children, context);\\\\\\\\\\\\\\\\n  diffAttribute(out, vnode.attributes);\\\\\\\\\\\\\\\\n  return out;\\\\\\\\\\\\\\\\n};\\\\\\\\\\\\\\\\n/**\\\\\\\\\\\\\\\\n * Diff attributes\\\\\\\\\\\\\\\\n *\\\\\\\\\\\\\\\\n * @param { dom } dom dom to diff\\\\\\\\\\\\\\\\n * @param { object } attrs attributes need to diff\\\\\\\\\\\\\\\\n */\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nvar diffAttribute = function diffAttribute(dom, attrs) {\\\\\\\\\\\\\\\\n  var oldAttrs = dom[_constants__WEBPACK_IMPORTED_MODULE_1__[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"ATTR_KEY\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"]] || {};\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n  for (name in oldAttrs) {\\\\\\\\\\\\\\\\n    if (!(attrs && attrs[name] != null) && oldAttrs[name] != null) {\\\\\\\\\\\\\\\\n      setAccessor(dom, name, undefined);\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\n  }\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n  for (name in attrs) {\\\\\\\\\\\\\\\\n    if (!(name in oldAttrs) || attrs[name] !== (name === 'value' || name === 'checked' ? dom[name] : oldAttrs[name])) {\\\\\\\\\\\\\\\\n      setAccessor(dom, name, attrs[name]);\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\n  }\\\\\\\\\\\\\\\\n};\\\\\\\\\\\\\\\\n/**\\\\\\\\\\\\\\\\n * Diff children\\\\\\\\\\\\\\\\n *\\\\\\\\\\\\\\\\n * @param {dom} dom dom to diff\\\\\\\\\\\\\\\\n * @param {array} children vnode children\\\\\\\\\\\\\\\\n */\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nvar diffChildren = function diffChildren(dom, children, context) {\\\\\\\\\\\\\\\\n  var originChildren = dom.childNodes;\\\\\\\\\\\\\\\\n  var length = children.length;\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n  for (var i = 0; i < length; i++) {\\\\\\\\\\\\\\\\n    var originChild = originChildren[i];\\\\\\\\\\\\\\\\n    var child = children[i];\\\\\\\\\\\\\\\\n    var resultChild = idiff(originChild, child, context);\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n    if (originChild !== resultChild) {\\\\\\\\\\\\\\\\n      if (originChild == null) {\\\\\\\\\\\\\\\\n        dom.appendChild(resultChild);\\\\\\\\\\\\\\\\n      } else {\\\\\\\\\\\\\\\\n        dom.replaceChild(resultChild, originChild);\\\\\\\\\\\\\\\\n      }\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\n  }\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n  if ((originChildren && originChildren.length) > length) {\\\\\\\\\\\\\\\\n    for (var _i = originChildren.length - 1; _i >= length; _i--) {\\\\\\\\\\\\\\\\n      dom.removeChild(originChildren[_i]);\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\n  }\\\\\\\\\\\\\\\\n};\\\\\\\\\\\\\\\\n/**\\\\\\\\\\\\\\\\n * Set dom attribute\\\\\\\\\\\\\\\\n *\\\\\\\\\\\\\\\\n * @param {dom} dom target dom\\\\\\\\\\\\\\\\n * @param {string} name the property name\\\\\\\\\\\\\\\\n * @param {any} value the property value\\\\\\\\\\\\\\\\n *\\\\\\\\\\\\\\\\n */\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nvar setAccessor = function setAccessor(dom, name, value) {\\\\\\\\\\\\\\\\n  dom[_constants__WEBPACK_IMPORTED_MODULE_1__[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"ATTR_KEY\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"]] = dom[_constants__WEBPACK_IMPORTED_MODULE_1__[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"ATTR_KEY\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"]] || {};\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n  if (value != null) {\\\\\\\\\\\\\\\\n    dom[_constants__WEBPACK_IMPORTED_MODULE_1__[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"ATTR_KEY\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"]][name] = value;\\\\\\\\\\\\\\\\n  } // className htmlFor\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n  if (name === 'className') {\\\\\\\\\\\\\\\\n    name = 'class';\\\\\\\\\\\\\\\\n  }\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n  if (name === 'htmlFor') {\\\\\\\\\\\\\\\\n    name = 'for';\\\\\\\\\\\\\\\\n  }\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n  if (name === 'key' || name === 'children' || name === 'innerHTML') {// ignore\\\\\\\\\\\\\\\\n  } else if (name === 'ref' && value != null) {\\\\\\\\\\\\\\\\n    if (typeof value === 'function') {\\\\\\\\\\\\\\\\n      value(dom);\\\\\\\\\\\\\\\\n    } else {\\\\\\\\\\\\\\\\n      console.error('ref should be an function');\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\n  } else if (name === 'style') {\\\\\\\\\\\\\\\\n    if (_typeof(value) === 'object') {\\\\\\\\\\\\\\\\n      for (var i in value) {\\\\\\\\\\\\\\\\n        dom.style[i] = typeof value[i] === 'number' ? \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\".concat(value[i], \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"px\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\") : value[i];\\\\\\\\\\\\\\\\n      }\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n    if (typeof value === 'string' || value == null) {\\\\\\\\\\\\\\\\n      dom.style = value;\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\n  } else if (name === 'dangerouslySetInnerHTML') {\\\\\\\\\\\\\\\\n    if (_typeof(value) === 'object') {\\\\\\\\\\\\\\\\n      dom.innerHTML = value.__html;\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\n  } else if (name.startsWith('on')) {\\\\\\\\\\\\\\\\n    var useCapture = name.endsWith('Capture');\\\\\\\\\\\\\\\\n    var eventType = name.toLowerCase().substring(2);\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n    if (value) {\\\\\\\\\\\\\\\\n      dom.addEventListener(eventType, eventProxy, useCapture);\\\\\\\\\\\\\\\\n    } else {\\\\\\\\\\\\\\\\n      dom.removeEventListener(eventType, eventProxy, useCapture);\\\\\\\\\\\\\\\\n    }\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n    (dom._listener || (dom._listener = {}))[eventType] = value;\\\\\\\\\\\\\\\\n  } else {\\\\\\\\\\\\\\\\n    dom.setAttribute(name, value);\\\\\\\\\\\\\\\\n  }\\\\\\\\\\\\\\\\n};\\\\\\\\\\\\\\\\n/**\\\\\\\\\\\\\\\\n * event proxy\\\\\\\\\\\\\\\\n *\\\\\\\\\\\\\\\\n * @param {event} e event\\\\\\\\\\\\\\\\n */\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nfunction eventProxy(e) {\\\\\\\\\\\\\\\\n  return this._listener[e.type](e);\\\\\\\\\\\\\\\\n}\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n//# sourceURL=[module]\\\\\\\\\\\\\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvZGlmZi5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL0VSZWFjdC8uL3NyYy9kaWZmLmpzPzJiYmMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYnVpbGRDb21wb25lbnRGcm9tVk5vZGUgfSBmcm9tICcuL2NvbXBvbmVudCc7XG5pbXBvcnQgeyBBVFRSX0tFWSB9IGZyb20gJy4vY29uc3RhbnRzJztcblxuLyoqXG4gKiBSZWNvbmNpbGlhdGlvbiBtZXRob2RcbiAqXG4gKiBAcGFyYW0geyBkb20gfSBkb20gZ2l2ZW4gZG9tXG4gKiBAcGFyYW0geyBWTm9kZSB9IHZub2RlIHZub2RlIHRvIGRpZmZcbiAqIEBwYXJhbSB7IGRvbSB9IHBhcmVudCB0aGUgZG9tIHZub2RlIG5lZWQgdG8gbW91bnRcbiAqXG4gKiBAcmV0dXJuIHRoZSByZXN1bHQgZG9tXG4gKi9cblxuY29uc3QgZGlmZiA9IChkb20sIHZub2RlLCBwYXJlbnQsIGNvbnRleHQpID0+IHtcblxuICBjb25zdCByZG9tID0gaWRpZmYoZG9tLCB2bm9kZSwgY29udGV4dCk7XG5cbiAgaWYgKHBhcmVudCAmJiByZG9tLnBhcmVudE5vZGUgIT09IHBhcmVudCkge1xuICAgIHBhcmVudC5hcHBlbmRDaGlsZChyZG9tKTtcbiAgfVxuICByZXR1cm4gcmRvbTtcbn1cblxuLyoqXG4gKiBJbnRlcm5hbCByZWNvbmNpbGlhdGlvbiBtZXRob2RcbiAqXG4gKiBAcGFyYW0geyBkb20gfSBkb20gZ2l2ZW4gZG9tXG4gKiBAcGFyYW0geyBWTm9kZSB9IHZub2RlIHZub2RlIHRvIGRpZmZcbiAqXG4gKiBAcmV0dXJuIHsgZG9tIH0gcmVzdWx0IGRvbVxuICovXG5cbmNvbnN0IGlkaWZmID0gKGRvbSwgdm5vZGUsIGNvbnRleHQpID0+IHtcbiAgbGV0IG91dCA9IGRvbTtcblxuICBpZiAodm5vZGUgPT0gbnVsbCB8fCB0eXBlb2Ygdm5vZGUgPT09ICdib29sZWFuJykge1xuICAgIHZub2RlID0gJydcbiAgfVxuXG4gIC8vIHVwZGF0ZSBvciBjcmVhdGUgYSBub2RlXG4gIGlmICh0eXBlb2Ygdm5vZGUgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiB2bm9kZSA9PT0gJ251bWJlcicpIHtcbiAgICBpZiAoZG9tICYmIGRvbS5wYXJlbnROb2RlICYmIGRvbS5ub2RlVHlwZSA9PT0gMykge1xuICAgICAgaWYgKGRvbS5ub2RlVmFsdWUgIT09IHZub2RlKSB7XG4gICAgICAgIGRvbS5ub2RlVmFsdWUgPSB2bm9kZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgb3V0ID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUodm5vZGUpO1xuICAgICAgaWYgKGRvbSAmJiBkb20ucGFyZW50Tm9kZSkgZG9tLnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKG91dCwgZG9tKTtcbiAgICB9XG4gICAgcmV0dXJuIG91dDtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygdm5vZGUudHlwZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBidWlsZENvbXBvbmVudEZyb21WTm9kZShkb20sIHZub2RlLCBjb250ZXh0KTtcbiAgfVxuXG4gIGlmICghZG9tIHx8IGRvbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICE9PSB2bm9kZS50eXBlKSB7XG4gICAgb3V0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh2bm9kZS50eXBlKTtcbiAgICBpZiAoZG9tKSB7XG4gICAgICB3aGlsZSAoZG9tLmZpcnN0Q2hpbGQpIG91dC5hcHBlbmRDaGlsZChkb20uZmlyc3RDaGlsZCk7XG4gICAgICBpZiAoZG9tLnBhcmVudE5vZGUpIGRvbS5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChvdXQsIGRvbSk7XG4gICAgfVxuICB9XG5cbiAgLy8gdGhlc2UgdHdvIGZ1bmN0aW9ucyBjYW4ndCBzd2FwIHBvc2l0aW9uXG4gIC8vIGJlY2F1c2UgZGlmZkF0dHJpYnV0ZXMgbWF5IHNldCBkYW5nZXJvdXNseVNldElubmVySFRNTCB3aGljaCBjYW4gY2hhbmdlIHRoZSBzdHJ1Y3R1cmVcbiAgZGlmZkNoaWxkcmVuKG91dCwgdm5vZGUuY2hpbGRyZW4sIGNvbnRleHQpO1xuICBkaWZmQXR0cmlidXRlKG91dCwgdm5vZGUuYXR0cmlidXRlcyk7XG5cbiAgcmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBEaWZmIGF0dHJpYnV0ZXNcbiAqXG4gKiBAcGFyYW0geyBkb20gfSBkb20gZG9tIHRvIGRpZmZcbiAqIEBwYXJhbSB7IG9iamVjdCB9IGF0dHJzIGF0dHJpYnV0ZXMgbmVlZCB0byBkaWZmXG4gKi9cblxuY29uc3QgZGlmZkF0dHJpYnV0ZSA9IChkb20sIGF0dHJzKSA9PiB7XG4gIGNvbnN0IG9sZEF0dHJzID0gZG9tW0FUVFJfS0VZXSB8fCB7fTtcblxuICBmb3IgKG5hbWUgaW4gb2xkQXR0cnMpIHtcbiAgICBpZiAoIShhdHRycyAmJiBhdHRyc1tuYW1lXSAhPSBudWxsKSAmJiBvbGRBdHRyc1tuYW1lXSAhPSBudWxsKSB7XG4gICAgICBzZXRBY2Nlc3Nvcihkb20sIG5hbWUsIHVuZGVmaW5lZCk7XG4gICAgfVxuICB9XG5cbiAgZm9yIChuYW1lIGluIGF0dHJzKSB7XG4gICAgaWYgKCEobmFtZSBpbiBvbGRBdHRycykgfHwgYXR0cnNbbmFtZV0gIT09IChuYW1lID09PSAndmFsdWUnIHx8IG5hbWUgPT09ICdjaGVja2VkJyA/IGRvbVtuYW1lXSA6IG9sZEF0dHJzW25hbWVdKSkge1xuICAgICAgc2V0QWNjZXNzb3IoZG9tLCBuYW1lLCBhdHRyc1tuYW1lXSk7XG4gICAgfVxuICB9XG59XG5cblxuLyoqXG4gKiBEaWZmIGNoaWxkcmVuXG4gKlxuICogQHBhcmFtIHtkb219IGRvbSBkb20gdG8gZGlmZlxuICogQHBhcmFtIHthcnJheX0gY2hpbGRyZW4gdm5vZGUgY2hpbGRyZW5cbiAqL1xuXG5jb25zdCBkaWZmQ2hpbGRyZW4gPSAoZG9tLCBjaGlsZHJlbiwgY29udGV4dCkgPT4ge1xuICBjb25zdCBvcmlnaW5DaGlsZHJlbiA9IGRvbS5jaGlsZE5vZGVzO1xuICBjb25zdCBsZW5ndGggPSBjaGlsZHJlbi5sZW5ndGg7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBvcmlnaW5DaGlsZCA9IG9yaWdpbkNoaWxkcmVuW2ldO1xuICAgIGNvbnN0IGNoaWxkID0gY2hpbGRyZW5baV07XG4gICAgY29uc3QgcmVzdWx0Q2hpbGQgPSBpZGlmZihvcmlnaW5DaGlsZCwgY2hpbGQsIGNvbnRleHQpO1xuXG4gICAgaWYgKG9yaWdpbkNoaWxkICE9PSByZXN1bHRDaGlsZCkge1xuICAgICAgaWYgKG9yaWdpbkNoaWxkID09IG51bGwpIHtcbiAgICAgICAgZG9tLmFwcGVuZENoaWxkKHJlc3VsdENoaWxkKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRvbS5yZXBsYWNlQ2hpbGQocmVzdWx0Q2hpbGQsIG9yaWdpbkNoaWxkKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoKG9yaWdpbkNoaWxkcmVuICYmIG9yaWdpbkNoaWxkcmVuLmxlbmd0aCkgPiBsZW5ndGgpIHtcbiAgICBmb3IgKGxldCBpID0gb3JpZ2luQ2hpbGRyZW4ubGVuZ3RoIC0gMTsgaSA+PSBsZW5ndGg7IGktLSkge1xuICAgICAgZG9tLnJlbW92ZUNoaWxkKG9yaWdpbkNoaWxkcmVuW2ldKTtcbiAgICB9XG4gIH1cbn1cblxuXG4vKipcbiAqIFNldCBkb20gYXR0cmlidXRlXG4gKlxuICogQHBhcmFtIHtkb219IGRvbSB0YXJnZXQgZG9tXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSB0aGUgcHJvcGVydHkgbmFtZVxuICogQHBhcmFtIHthbnl9IHZhbHVlIHRoZSBwcm9wZXJ0eSB2YWx1ZVxuICpcbiAqL1xuXG5jb25zdCBzZXRBY2Nlc3NvciA9IChkb20sIG5hbWUsIHZhbHVlKSA9PiB7XG4gIGRvbVtBVFRSX0tFWV0gPSBkb21bQVRUUl9LRVldIHx8IHt9O1xuICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgIGRvbVtBVFRSX0tFWV1bbmFtZV0gPSB2YWx1ZTtcbiAgfVxuXG4gIC8vIGNsYXNzTmFtZSBodG1sRm9yXG4gIGlmIChuYW1lID09PSAnY2xhc3NOYW1lJykge1xuICAgIG5hbWUgPSAnY2xhc3MnO1xuICB9XG5cbiAgaWYgKG5hbWUgPT09ICdodG1sRm9yJykge1xuICAgIG5hbWUgPSAnZm9yJztcbiAgfVxuXG4gIGlmIChuYW1lID09PSAna2V5JyB8fCBuYW1lID09PSAnY2hpbGRyZW4nIHx8IG5hbWUgPT09ICdpbm5lckhUTUwnKSB7XG4gICAgLy8gaWdub3JlXG4gIH0gZWxzZSBpZiAobmFtZSA9PT0gJ3JlZicgJiYgdmFsdWUgIT0gbnVsbCkge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHZhbHVlKGRvbSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ3JlZiBzaG91bGQgYmUgYW4gZnVuY3Rpb24nKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAobmFtZSA9PT0gJ3N0eWxlJykge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgICBmb3IgKGxldCBpIGluIHZhbHVlKSB7XG4gICAgICAgIGRvbS5zdHlsZVtpXSA9IHR5cGVvZiB2YWx1ZVtpXSA9PT0gJ251bWJlcicgPyBgJHt2YWx1ZVtpXX1weGAgOiB2YWx1ZVtpXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyB8fCB2YWx1ZSA9PSBudWxsKSB7XG4gICAgICBkb20uc3R5bGUgPSB2YWx1ZTtcbiAgICB9XG4gIH0gZWxzZSBpZiAobmFtZSA9PT0gJ2Rhbmdlcm91c2x5U2V0SW5uZXJIVE1MJykge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XG4gICAgICBkb20uaW5uZXJIVE1MID0gdmFsdWUuX19odG1sO1xuICAgIH1cbiAgfSBlbHNlIGlmIChuYW1lLnN0YXJ0c1dpdGgoJ29uJykpIHtcbiAgICBjb25zdCB1c2VDYXB0dXJlID0gbmFtZS5lbmRzV2l0aCgnQ2FwdHVyZScpO1xuICAgIGNvbnN0IGV2ZW50VHlwZSA9IG5hbWUudG9Mb3dlckNhc2UoKS5zdWJzdHJpbmcoMik7XG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICBkb20uYWRkRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGV2ZW50UHJveHksIHVzZUNhcHR1cmUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBkb20ucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGV2ZW50UHJveHksIHVzZUNhcHR1cmUpO1xuICAgIH1cbiAgICAoZG9tLl9saXN0ZW5lciB8fCAoZG9tLl9saXN0ZW5lciA9IHt9KSlbZXZlbnRUeXBlXSA9IHZhbHVlO1xuICB9IGVsc2Uge1xuICAgIGRvbS5zZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpO1xuICB9XG59XG5cbi8qKlxuICogZXZlbnQgcHJveHlcbiAqXG4gKiBAcGFyYW0ge2V2ZW50fSBlIGV2ZW50XG4gKi9cbmZ1bmN0aW9uIGV2ZW50UHJveHkoZSkge1xuICByZXR1cm4gdGhpcy5fbGlzdGVuZXJbZS50eXBlXShlKTtcbn1cblxuZXhwb3J0IHsgZGlmZiwgaWRpZmYsIGRpZmZDaGlsZHJlbiB9O1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBO0FBQ0E7QUFFQTs7Ozs7Ozs7OztBQVVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUVBOzs7Ozs7Ozs7O0FBU0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBREE7QUFDQTtBQUVBO0FBQ0E7QUFFQTs7Ozs7Ozs7QUFPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTs7Ozs7Ozs7QUFPQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTs7Ozs7Ozs7OztBQVNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7Ozs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\\\\\\\\\\\\\\\\n//# sourceURL=webpack-internal:///./src/diff.js\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\");\\\\\\\\n        /***/\\\\\\\\n      },\\\\\\\\n\\\\\\\\n      /***/\\\\\\\\n      \\\\\\\\\\\\\\\"./src/index.js\\\\\\\\\\\\\\\":\\\\\\\\n      /*!**********************!*\\\\\\\\\\\\\\\\\\\\\\\\n        !*** ./src/index.js ***!\\\\\\\\n        \\\\\\\\\\\\\\\\**********************/\\\\\\\\n\\\\\\\\n      /*! exports provided: default */\\\\\\\\n\\\\\\\\n      /***/\\\\\\\\n      function srcIndexJs(module, __webpack_exports__, __webpack_require__) {\\\\\\\\n        \\\\\\\\\\\\\\\"use strict\\\\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\n        eval(\\\\\\\\\\\\\\\"__webpack_require__.r(__webpack_exports__);\\\\\\\\\\\\\\\\n/* harmony import */ var _createElement__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./createElement */ \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"./src/createElement.js\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\");\\\\\\\\\\\\\\\\n/* harmony import */ var _render__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./render */ \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"./src/render.js\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\");\\\\\\\\\\\\\\\\n/* harmony import */ var _component__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./component */ \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"./src/component.js\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\");\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n/* harmony default export */ __webpack_exports__[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"] = ({\\\\\\\\\\\\\\\\n  createElement: _createElement__WEBPACK_IMPORTED_MODULE_0__[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"],\\\\\\\\\\\\\\\\n  render: _render__WEBPACK_IMPORTED_MODULE_1__[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"],\\\\\\\\\\\\\\\\n  Component: _component__WEBPACK_IMPORTED_MODULE_2__[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Component\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"]\\\\\\\\\\\\\\\\n});//# sourceURL=[module]\\\\\\\\\\\\\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9FUmVhY3QvLi9zcmMvaW5kZXguanM/YjYzNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgY3JlYXRlRWxlbWVudCBmcm9tICcuL2NyZWF0ZUVsZW1lbnQnO1xuaW1wb3J0IHJlbmRlciBmcm9tICcuL3JlbmRlcic7XG5pbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudCc7XG5cbmV4cG9ydCBkZWZhdWx0IHsgY3JlYXRlRWxlbWVudCwgcmVuZGVyLCBDb21wb25lbnQgfTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFFQTtBQUFBO0FBQUE7QUFBQTtBQUFBIiwic291cmNlUm9vdCI6IiJ9\\\\\\\\\\\\\\\\n//# sourceURL=webpack-internal:///./src/index.js\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\");\\\\\\\\n        /***/\\\\\\\\n      },\\\\\\\\n\\\\\\\\n      /***/\\\\\\\\n      \\\\\\\\\\\\\\\"./src/render.js\\\\\\\\\\\\\\\":\\\\\\\\n      /*!***********************!*\\\\\\\\\\\\\\\\\\\\\\\\n        !*** ./src/render.js ***!\\\\\\\\n        \\\\\\\\\\\\\\\\***********************/\\\\\\\\n\\\\\\\\n      /*! exports provided: default */\\\\\\\\n\\\\\\\\n      /***/\\\\\\\\n      function srcRenderJs(module, __webpack_exports__, __webpack_require__) {\\\\\\\\n        \\\\\\\\\\\\\\\"use strict\\\\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\n        eval(\\\\\\\\\\\\\\\"__webpack_require__.r(__webpack_exports__);\\\\\\\\\\\\\\\\n/* harmony import */ var _diff__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./diff */ \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"./src/diff.js\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\");\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n/**\\\\\\\\\\\\\\\\n * render VNode\\\\\\\\\\\\\\\\n *\\\\\\\\\\\\\\\\n * @param {VNode} vnode virtual node\\\\\\\\\\\\\\\\n * @param {Element} container the container dom element\\\\\\\\\\\\\\\\n *\\\\\\\\\\\\\\\\n */\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nvar render = function render(vnode, container) {\\\\\\\\\\\\\\\\n  return Object(_diff__WEBPACK_IMPORTED_MODULE_0__[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"diff\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"])(null, vnode, container, {});\\\\\\\\\\\\\\\\n};\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n/* harmony default export */ __webpack_exports__[\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"default\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"] = (render);//# sourceURL=[module]\\\\\\\\\\\\\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvcmVuZGVyLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vRVJlYWN0Ly4vc3JjL3JlbmRlci5qcz8xMWZjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGRpZmYgfSBmcm9tICcuL2RpZmYnO1xuXG4vKipcbiAqIHJlbmRlciBWTm9kZVxuICpcbiAqIEBwYXJhbSB7Vk5vZGV9IHZub2RlIHZpcnR1YWwgbm9kZVxuICogQHBhcmFtIHtFbGVtZW50fSBjb250YWluZXIgdGhlIGNvbnRhaW5lciBkb20gZWxlbWVudFxuICpcbiAqL1xuXG5jb25zdCByZW5kZXIgPSAodm5vZGUsIGNvbnRhaW5lcikgPT4ge1xuICByZXR1cm4gZGlmZihudWxsLCB2bm9kZSwgY29udGFpbmVyLCB7fSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHJlbmRlcjtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBRUE7Ozs7Ozs7O0FBUUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\\\\\\\\\\\\\\\\n//# sourceURL=webpack-internal:///./src/render.js\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\");\\\\\\\\n        /***/\\\\\\\\n      },\\\\\\\\n\\\\\\\\n      /***/\\\\\\\\n      \\\\\\\\\\\\\\\"./src/utils.js\\\\\\\\\\\\\\\":\\\\\\\\n      /*!**********************!*\\\\\\\\\\\\\\\\\\\\\\\\n        !*** ./src/utils.js ***!\\\\\\\\n        \\\\\\\\\\\\\\\\**********************/\\\\\\\\n\\\\\\\\n      /*! exports provided: uniq, defer, isArray */\\\\\\\\n\\\\\\\\n      /***/\\\\\\\\n      function srcUtilsJs(module, __webpack_exports__, __webpack_require__) {\\\\\\\\n        \\\\\\\\\\\\\\\"use strict\\\\\\\\\\\\\\\";\\\\\\\\n\\\\\\\\n        eval(\\\\\\\\\\\\\\\"__webpack_require__.r(__webpack_exports__);\\\\\\\\\\\\\\\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"uniq\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\", function() { return uniq; });\\\\\\\\\\\\\\\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"defer\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\", function() { return defer; });\\\\\\\\\\\\\\\\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"isArray\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\", function() { return isArray; });\\\\\\\\\\\\\\\\n/**\\\\\\\\\\\\\\\\n * Create an duplicate-free version of an array which only the first occurrence of each element is kept.\\\\\\\\\\\\\\\\n *\\\\\\\\\\\\\\\\n * @param {Array} array the array to inspect\\\\\\\\\\\\\\\\n *\\\\\\\\\\\\\\\\n * @return the new duplicate free array\\\\\\\\\\\\\\\\n *\\\\\\\\\\\\\\\\n */\\\\\\\\\\\\\\\\nvar uniq = function uniq(originArray) {\\\\\\\\\\\\\\\\n  var array = originArray.slice();\\\\\\\\\\\\\\\\n  return array.reverse().filter(function (item, index) {\\\\\\\\\\\\\\\\n    return array.lastIndexOf(item) === index;\\\\\\\\\\\\\\\\n  }).reverse();\\\\\\\\\\\\\\\\n};\\\\\\\\\\\\\\\\n/**\\\\\\\\\\\\\\\\n * Defers invoking function until the current call stack has cleared\\\\\\\\\\\\\\\\n *\\\\\\\\\\\\\\\\n * @param {Function} func the function will defer\\\\\\\\\\\\\\\\n *\\\\\\\\\\\\\\\\n */\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nvar defer = function defer(func) {\\\\\\\\\\\\\\\\n  if (typeof Promise === 'function') {\\\\\\\\\\\\\\\\n    Promise.resolve().then(func);\\\\\\\\\\\\\\\\n  } else {\\\\\\\\\\\\\\\\n    setTimeout(func);\\\\\\\\\\\\\\\\n  }\\\\\\\\\\\\\\\\n};\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\nvar isArray = function isArray(array) {\\\\\\\\\\\\\\\\n  return Array.isArray ? Array.isArray(array) : Object.prototype.toString.call(array) === '[object Array]';\\\\\\\\\\\\\\\\n};\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\\n//# sourceURL=[module]\\\\\\\\\\\\\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbHMuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9FUmVhY3QvLi9zcmMvdXRpbHMuanM/MDI1ZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENyZWF0ZSBhbiBkdXBsaWNhdGUtZnJlZSB2ZXJzaW9uIG9mIGFuIGFycmF5IHdoaWNoIG9ubHkgdGhlIGZpcnN0IG9jY3VycmVuY2Ugb2YgZWFjaCBlbGVtZW50IGlzIGtlcHQuXG4gKlxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgdGhlIGFycmF5IHRvIGluc3BlY3RcbiAqXG4gKiBAcmV0dXJuIHRoZSBuZXcgZHVwbGljYXRlIGZyZWUgYXJyYXlcbiAqXG4gKi9cblxuY29uc3QgdW5pcSA9IG9yaWdpbkFycmF5ID0+IHtcbiAgY29uc3QgYXJyYXkgPSBvcmlnaW5BcnJheS5zbGljZSgpO1xuICByZXR1cm4gYXJyYXkucmV2ZXJzZSgpXG4gIC5maWx0ZXIoKGl0ZW0sIGluZGV4KSA9PiBhcnJheS5sYXN0SW5kZXhPZihpdGVtKSA9PT0gaW5kZXgpXG4gIC5yZXZlcnNlKCk7XG59XG5cblxuLyoqXG4gKiBEZWZlcnMgaW52b2tpbmcgZnVuY3Rpb24gdW50aWwgdGhlIGN1cnJlbnQgY2FsbCBzdGFjayBoYXMgY2xlYXJlZFxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgdGhlIGZ1bmN0aW9uIHdpbGwgZGVmZXJcbiAqXG4gKi9cblxuY29uc3QgZGVmZXIgPSBmdW5jID0+IHtcbiAgaWYgKHR5cGVvZiBQcm9taXNlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jKTtcbiAgfSBlbHNlIHtcbiAgICBzZXRUaW1lb3V0KGZ1bmMpO1xuICB9XG59XG5cbmNvbnN0IGlzQXJyYXkgPSBhcnJheSA9PiB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5XG4gID8gQXJyYXkuaXNBcnJheShhcnJheSlcbiAgOiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJyYXkpID09PSAnW29iamVjdCBBcnJheV0nO1xufVxuXG5leHBvcnQgeyB1bmlxLCBkZWZlciwgaXNBcnJheSB9O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOzs7Ozs7OztBQVNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFFQTtBQUdBOzs7Ozs7OztBQU9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\\\\\\\\\\\\\\\\n//# sourceURL=webpack-internal:///./src/utils.js\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\");\\\\\\\\n        /***/\\\\\\\\n      }\\\\\\\\n      /******/\\\\\\\\n\\\\\\\\n    })\\\\\\\\n  );\\\\\\\\n});\\\\\\\\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/webpack/buildin/module.js */ \\\\\\\\\\\\\\\"./node_modules/webpack/buildin/module.js\\\\\\\\\\\\\\\")(module)))//# sourceURL=[module]\\\\\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\\\\\\\n//# sourceURL=webpack-internal:///./dist/ereact.development.js\\\\\\\\n\\\\\\\");\\\\n        /***/\\\\n      },\\\\n\\\\n      /***/\\\\n      \\\\\\\"./index.js\\\\\\\":\\\\n      /*!******************!*\\\\\\\\\\\\n        !*** ./index.js ***!\\\\n        \\\\\\\\******************/\\\\n\\\\n      /*! no static exports found */\\\\n\\\\n      /***/\\\\n      function indexJs(module, exports, __webpack_require__) {\\\\n        \\\\\\\"use strict\\\\\\\";\\\\n\\\\n        eval(\\\\\\\"\\\\\\\\n\\\\\\\\nvar EReact = null;\\\\\\\\n\\\\\\\\nif (false) {} else {\\\\\\\\n  EReact = __webpack_require__(/*! ./dist/ereact.development */ \\\\\\\\\\\\\\\"./dist/ereact.development.js\\\\\\\\\\\\\\\");\\\\\\\\n}\\\\\\\\n\\\\\\\\nmodule.exports = EReact.default || EReact;//# sourceURL=[module]\\\\\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9pbmRleC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL0VSZWFjdC8uL2luZGV4LmpzPzQxZjUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5sZXQgRVJlYWN0ID0gbnVsbDtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgRVJlYWN0ID0gcmVxdWlyZSgnLi9kaXN0L2VyZWFjdC5wcm9kdWN0aW9uJyk7XG59IGVsc2Uge1xuICBFUmVhY3QgPSByZXF1aXJlKCcuL2Rpc3QvZXJlYWN0LmRldmVsb3BtZW50Jyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gRVJlYWN0LmRlZmF1bHQgfHwgRVJlYWN0O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\\\\\\\\n//# sourceURL=webpack-internal:///./index.js\\\\\\\\n\\\\\\\");\\\\n        /***/\\\\n      },\\\\n\\\\n      /***/\\\\n      \\\\\\\"./node_modules/webpack/buildin/module.js\\\\\\\":\\\\n      /*!***********************************!*\\\\\\\\\\\\n        !*** (webpack)/buildin/module.js ***!\\\\n        \\\\\\\\***********************************/\\\\n\\\\n      /*! no static exports found */\\\\n\\\\n      /***/\\\\n      function node_modulesWebpackBuildinModuleJs(module, exports) {\\\\n        eval(\\\\\\\"module.exports = function (module) {\\\\\\\\n  if (!module.webpackPolyfill) {\\\\\\\\n    module.deprecate = function () {};\\\\\\\\n\\\\\\\\n    module.paths = []; // module.parent = undefined by default\\\\\\\\n\\\\\\\\n    if (!module.children) module.children = [];\\\\\\\\n    Object.defineProperty(module, \\\\\\\\\\\\\\\"loaded\\\\\\\\\\\\\\\", {\\\\\\\\n      enumerable: true,\\\\\\\\n      get: function get() {\\\\\\\\n        return module.l;\\\\\\\\n      }\\\\\\\\n    });\\\\\\\\n    Object.defineProperty(module, \\\\\\\\\\\\\\\"id\\\\\\\\\\\\\\\", {\\\\\\\\n      enumerable: true,\\\\\\\\n      get: function get() {\\\\\\\\n        return module.i;\\\\\\\\n      }\\\\\\\\n    });\\\\\\\\n    module.webpackPolyfill = 1;\\\\\\\\n  }\\\\\\\\n\\\\\\\\n  return module;\\\\\\\\n};//# sourceURL=[module]\\\\\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvd2VicGFjay9idWlsZGluL21vZHVsZS5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL0VSZWFjdC8od2VicGFjaykvYnVpbGRpbi9tb2R1bGUuanM/Y2VkMiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1vZHVsZSkge1xyXG5cdGlmICghbW9kdWxlLndlYnBhY2tQb2x5ZmlsbCkge1xyXG5cdFx0bW9kdWxlLmRlcHJlY2F0ZSA9IGZ1bmN0aW9uKCkge307XHJcblx0XHRtb2R1bGUucGF0aHMgPSBbXTtcclxuXHRcdC8vIG1vZHVsZS5wYXJlbnQgPSB1bmRlZmluZWQgYnkgZGVmYXVsdFxyXG5cdFx0aWYgKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xyXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xyXG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxyXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcclxuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcclxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XHJcblx0fVxyXG5cdHJldHVybiBtb2R1bGU7XHJcbn07XHJcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSkE7QUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSkE7QUFNQTtBQUNBO0FBQ0E7QUFBQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\\\\\\\\n//# sourceURL=webpack-internal:///./node_modules/webpack/buildin/module.js\\\\\\\\n\\\\\\\");\\\\n        /***/\\\\n      }\\\\n      /******/\\\\n\\\\n    })\\\\n  );\\\\n});\\\\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/webpack/buildin/module.js */ \\\\\\\"./node_modules/webpack/buildin/module.js\\\\\\\")(module)))//# sourceURL=[module]\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\\\n//# sourceURL=webpack-internal:///./dist/ereact.development.js\\\\n\\\");\\n        /***/\\n      },\\n\\n      /***/\\n      \\\"./index.js\\\":\\n      /*!******************!*\\\\\\n        !*** ./index.js ***!\\n        \\\\******************/\\n\\n      /*! no static exports found */\\n\\n      /***/\\n      function indexJs(module, exports, __webpack_require__) {\\n        \\\"use strict\\\";\\n\\n        eval(\\\"\\\\n\\\\nvar EReact = null;\\\\n\\\\nif (false) {} else {\\\\n  EReact = __webpack_require__(/*! ./dist/ereact.development */ \\\\\\\"./dist/ereact.development.js\\\\\\\");\\\\n}\\\\n\\\\nmodule.exports = EReact.default || EReact;//# sourceURL=[module]\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9pbmRleC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL0VSZWFjdC8uL2luZGV4LmpzPzQxZjUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5sZXQgRVJlYWN0ID0gbnVsbDtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgRVJlYWN0ID0gcmVxdWlyZSgnLi9kaXN0L2VyZWFjdC5wcm9kdWN0aW9uJyk7XG59IGVsc2Uge1xuICBFUmVhY3QgPSByZXF1aXJlKCcuL2Rpc3QvZXJlYWN0LmRldmVsb3BtZW50Jyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gRVJlYWN0LmRlZmF1bHQgfHwgRVJlYWN0O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\\\\n//# sourceURL=webpack-internal:///./index.js\\\\n\\\");\\n        /***/\\n      },\\n\\n      /***/\\n      \\\"./node_modules/webpack/buildin/module.js\\\":\\n      /*!***********************************!*\\\\\\n        !*** (webpack)/buildin/module.js ***!\\n        \\\\***********************************/\\n\\n      /*! no static exports found */\\n\\n      /***/\\n      function node_modulesWebpackBuildinModuleJs(module, exports) {\\n        eval(\\\"module.exports = function (module) {\\\\n  if (!module.webpackPolyfill) {\\\\n    module.deprecate = function () {};\\\\n\\\\n    module.paths = []; // module.parent = undefined by default\\\\n\\\\n    if (!module.children) module.children = [];\\\\n    Object.defineProperty(module, \\\\\\\"loaded\\\\\\\", {\\\\n      enumerable: true,\\\\n      get: function get() {\\\\n        return module.l;\\\\n      }\\\\n    });\\\\n    Object.defineProperty(module, \\\\\\\"id\\\\\\\", {\\\\n      enumerable: true,\\\\n      get: function get() {\\\\n        return module.i;\\\\n      }\\\\n    });\\\\n    module.webpackPolyfill = 1;\\\\n  }\\\\n\\\\n  return module;\\\\n};//# sourceURL=[module]\\\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvd2VicGFjay9idWlsZGluL21vZHVsZS5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL0VSZWFjdC8od2VicGFjaykvYnVpbGRpbi9tb2R1bGUuanM/Y2VkMiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuXHRpZiAoIW1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcblx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24oKSB7fTtcblx0XHRtb2R1bGUucGF0aHMgPSBbXTtcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcblx0XHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XG5cdH1cblx0cmV0dXJuIG1vZHVsZTtcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUpBO0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUpBO0FBTUE7QUFDQTtBQUNBO0FBQUE7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\\\\n//# sourceURL=webpack-internal:///./node_modules/webpack/buildin/module.js\\\\n\\\");\\n        /***/\\n      }\\n      /******/\\n\\n    })\\n  );\\n});\\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/webpack/buildin/module.js */ \\\"./node_modules/webpack/buildin/module.js\\\")(module)))//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///./dist/ereact.development.js\\n\");/***/},/***/\"./index.js\":/*!******************!*\\\n  !*** ./index.js ***!\n  \\******************/ /*! no static exports found */ /***/function indexJs(module,exports,__webpack_require__){\"use strict\";eval(\"\\n\\nvar EReact = null;\\n\\nif (false) {} else {\\n  EReact = __webpack_require__(/*! ./dist/ereact.development */ \\\"./dist/ereact.development.js\\\");\\n}\\n\\nmodule.exports = EReact.default || EReact;//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9pbmRleC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL0VSZWFjdC8uL2luZGV4LmpzPzQxZjUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5sZXQgRVJlYWN0ID0gbnVsbDtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgRVJlYWN0ID0gcmVxdWlyZSgnLi9kaXN0L2VyZWFjdC5wcm9kdWN0aW9uJyk7XG59IGVsc2Uge1xuICBFUmVhY3QgPSByZXF1aXJlKCcuL2Rpc3QvZXJlYWN0LmRldmVsb3BtZW50Jyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gRVJlYWN0LmRlZmF1bHQgfHwgRVJlYWN0O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///./index.js\\n\");/***/},/***/\"./node_modules/webpack/buildin/module.js\":/*!***********************************!*\\\n  !*** (webpack)/buildin/module.js ***!\n  \\***********************************/ /*! no static exports found */ /***/function node_modulesWebpackBuildinModuleJs(module,exports){eval(\"module.exports = function (module) {\\n  if (!module.webpackPolyfill) {\\n    module.deprecate = function () {};\\n\\n    module.paths = []; // module.parent = undefined by default\\n\\n    if (!module.children) module.children = [];\\n    Object.defineProperty(module, \\\"loaded\\\", {\\n      enumerable: true,\\n      get: function get() {\\n        return module.l;\\n      }\\n    });\\n    Object.defineProperty(module, \\\"id\\\", {\\n      enumerable: true,\\n      get: function get() {\\n        return module.i;\\n      }\\n    });\\n    module.webpackPolyfill = 1;\\n  }\\n\\n  return module;\\n};//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvd2VicGFjay9idWlsZGluL21vZHVsZS5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL0VSZWFjdC8od2VicGFjaykvYnVpbGRpbi9tb2R1bGUuanM/Y2VkMiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuXHRpZiAoIW1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcblx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24oKSB7fTtcblx0XHRtb2R1bGUucGF0aHMgPSBbXTtcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcblx0XHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XG5cdH1cblx0cmV0dXJuIG1vZHVsZTtcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUpBO0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUpBO0FBTUE7QUFDQTtBQUNBO0FBQUE7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\\n//# sourceURL=webpack-internal:///./node_modules/webpack/buildin/module.js\\n\");/***/}/******/}));});\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/webpack/buildin/module.js */ \"./node_modules/webpack/buildin/module.js\")(module)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./dist/ereact.development.js\n");

/***/ }),

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar EReact = null;\n\nif (false) {} else {\n  EReact = __webpack_require__(/*! ./dist/ereact.development */ \"./dist/ereact.development.js\");\n}\n\nmodule.exports = EReact.default || EReact;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9pbmRleC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL0VSZWFjdC8uL2luZGV4LmpzPzQxZjUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5sZXQgRVJlYWN0ID0gbnVsbDtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgRVJlYWN0ID0gcmVxdWlyZSgnLi9kaXN0L2VyZWFjdC5wcm9kdWN0aW9uJyk7XG59IGVsc2Uge1xuICBFUmVhY3QgPSByZXF1aXJlKCcuL2Rpc3QvZXJlYWN0LmRldmVsb3BtZW50Jyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gRVJlYWN0LmRlZmF1bHQgfHwgRVJlYWN0O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./index.js\n");

/***/ }),

/***/ "./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = function (module) {\n  if (!module.webpackPolyfill) {\n    module.deprecate = function () {};\n\n    module.paths = []; // module.parent = undefined by default\n\n    if (!module.children) module.children = [];\n    Object.defineProperty(module, \"loaded\", {\n      enumerable: true,\n      get: function get() {\n        return module.l;\n      }\n    });\n    Object.defineProperty(module, \"id\", {\n      enumerable: true,\n      get: function get() {\n        return module.i;\n      }\n    });\n    module.webpackPolyfill = 1;\n  }\n\n  return module;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvd2VicGFjay9idWlsZGluL21vZHVsZS5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL0VSZWFjdC8od2VicGFjaykvYnVpbGRpbi9tb2R1bGUuanM/Y2VkMiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuXHRpZiAoIW1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcblx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24oKSB7fTtcblx0XHRtb2R1bGUucGF0aHMgPSBbXTtcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcblx0XHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XG5cdH1cblx0cmV0dXJuIG1vZHVsZTtcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUpBO0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUpBO0FBTUE7QUFDQTtBQUNBO0FBQUE7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/webpack/buildin/module.js\n");

/***/ })

/******/ });
});